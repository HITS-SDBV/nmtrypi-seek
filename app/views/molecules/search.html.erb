<div class="yui-g" style="margin: 0.8em 0.8em;">
  <div class="yui-u first">
    <div><h1>Search Query</h1></div>
    <%= render :partial => "search_box" %>
  </div>

  <div class="yui-u">
    <div><h1>JSME Editor</h1></div>
    <div id='jsme_container'></div>
  </div>
</div>

<div class="show_basic">
  <% data_order = ""
     case @search_type
     when :SIMILARITY
       data_order = '[[ 0, "desc" ]]'
     when :SMARTS
       data_order  = '[[ 0, "asc" ]]'
     end %>
  <table id="structure_query_result" data-order='<%= data_order %>'>
    <thead>
      <tr>
      <% if @search_type == :SIMILARITY %>
        <th>Tanimoto Coefficient</th>
      <% elsif @search_type == :SMARTS %>
        <th>Number of occurences</th>
      <% end %>
        <th>compoundID</th>
      <% if @search_type == :SMARTS %>
        <th data-orderable="false">Highlight substructure match</th>
      <% end %>
        <th data-orderable="false">structure</th>
        <th data-orderable="false">smiles</th>
      </tr>
    </thead>
    <tbody>
    <% @smiles_hash.each do |compound_id, smiles| %>
        <%= render :partial => 'molecules/compound',
                   locals: { compound_id: compound_id,
                             smiles: smiles}
        %>
    <% end %>
    </tbody>
  </table>
</div>

<script type="text/javascript">
function updateQuery(jsmeEvent) {
  var jsme = jsmeEvent.src;
  var smiles = jsme.smiles();
  var search_query = jQuery('#structure_search_query');
  search_query.val(jsme.smiles()).change();
}

//this function will be called after the JavaScriptApplet code has been loaded.
function jsmeOnLoad() {
  //Instantiate a new JSME:
  //arguments: HTML id, width, height (must be string not number!), options
  jsmeQueryApplet = new JSApplet.JSME("jsme_container", "380px", "380px", {
    //optional parameters
    smiles: jQuery('#structure_search_query').val(),
    "options" : "query,hydrogens"
  });
  jsmeQueryApplet.setCallBack("AfterStructureModified", updateQuery);

  // jQuery.ajax({
    // url: "<%= mol2file_molecules_path %>",
    // data: { SMILES: jQuery('#structure_search_query').val()},
    // dataType: "text"
  // }).done(function(data){
    // jsmeQueryApplet.readMolFile(data);
  // });

  jsmeApplets = {};
  jQuery('.jsme-box').each( function(index, element){
    var box = jQuery(element);
    var id = box.attr('id');
    jsmeApplets[id] = new JSApplet.JSME(id, "280px", "280px", {
      "options" : box.data('options'),
      "smiles" : box.data('smiles')
    });
    // instead of using openchemlib to create molecule from smiles, use the seek service
    // jQuery.ajax({
    	// url: "<%= mol2file_molecules_path %>",
    	// data: { SMILES: box.data('smiles')},
    	// dataType: "text",
//     	
    // }).done(function(data){
    	// jsmeApplets[id] = new JSApplet.JSME(id, "280px", "280px", {
          // "options" : box.data('options')
        // });
        // jsmeApplets[id].readMolFile(data);
    	// jsmeApplets[id].setCallBack("AtomHighlight","show_smiles");
    // });
  });

  var table = jQuery('#structure_query_result').DataTable({
    "lengthMenu": [[10,25, 50,75,100, -1],[10,25,50,75,100, "All"]],
    buttons: [
      {
        extend: 'collection',
        text: 'Export',
        autoClose: true,
        buttons: ['copy', 'csv', 'excel', 'pdf', 'print']
      },
      {
        extend: 'collection',
        text: 'Select',
        autoClose: true,
        buttons: [
          {
            text: "Select all",
            action: function(){
              jQuery('#structure_query_result tbody tr').addClass('selected');
            }
          },
          {
            text: "Deselect all",
            action: function(){
              jQuery('#structure_query_result tbody tr').removeClass('selected');
            }
          }
        ]
      },
      {
        text: "Attributes for selected",
        action: function(){
          ids = jQuery( table.rows('.selected').nodes()).map(
                  function(){ return jQuery(this).data('compoundid');}
                ).get();
          if( ids.length > 0) {
            window.location.href = "<%= compounds_attributes_table_path %>?" + jQuery.param({ "ids":ids});
          } 
        }
      }
    ],
    asStripeClasses: []
  });
  table.buttons().container().insertAfter( '#structure_query_result_length');
  
  jQuery('#structure_query_result tbody').on( 'click', 'td:not(.not_selectable)', function () {
    jQuery(this).parent().toggleClass('selected');
  });
}

function highlightAtoms(element) {
  var jelement = jQuery(element);
  var row = jQuery(jelement.parents('tr'));
  var jsme = jsmeApplets["jsme_"+row.data('compoundid')];
  var atom_list = jelement.data("atom-list");
  var color = jelement.data("color");;
  var atom_color_list = [];
  atom_list.forEach(function(item,index) {
    atom_color_list.push(item);
    atom_color_list.push(color);
  });
  jsme.resetAtomColors(1);
  jsme.setAtomBackgroundColors(1, atom_color_list.join());
}

function clearHighlightAtoms(element) {
  var jelement = jQuery(element);
  var row = jQuery(jelement.parents('tr'));
  var jsme = jsmeApplets["jsme_"+row.data('compoundid')];
  jsme.resetAtomColors(1);
}
</script>
