<%= stylesheet_link_tag "lightbox", "ul_li_table" %>
<%= javascript_include_tag 'zoom/lightbox' %>

<div class="show_basic">
  <table id="structure_query_result">
    <thead>
      <tr>
      <% if @search_type == :SIMILARITY %>
        <th>Tanimoto Coefficient</th>
      <% elsif @search_type == :SMARTS %>
        <th>Number of occurences</th>
      <% end %>
        <th>compoundID</th>
        <th data-orderable="false">structure</th>
        <th data-orderable="false">smiles</th>
      </tr>
    </thead>
    <tbody>
    <% @smiles_hash.each do |compound_id, smiles| %>
        <%= render :partial => 'molecules/compound',
                   locals: { compound_id: compound_id,
                             smiles: smiles}
        %>
    <% end %>
    </tbody>
  </table>
</div>

<script type="text/javascript">
//this function will be called after the JavaScriptApplet code has been loaded.
function jsmeOnLoad() {
  jsmeApplets = {};
  jQuery('.jsme-box').each( function(index, element){
    var box = jQuery(element);
    var id = box.attr('id');
    jsmeApplets[id] = new JSApplet.JSME(id, "280px", "280px", {
      "options" : box.data('options'),
      "smiles" : box.data('smiles')
    });
    // instead of using openchemlib to create molecule from smiles, use the seek service
    // jQuery.ajax({
    	// url: "<%= mol2file_molecules_path %>",
    	// data: { SMILES: box.data('smiles')},
    	// dataType: "text",
//     	
    // }).done(function(data){
    	// jsmeApplets[id] = new JSApplet.JSME(id, "280px", "280px", {
          // "options" : box.data('options')
        // });
        // jsmeApplets[id].readMolFile(data);
    	// jsmeApplets[id].setCallBack("AtomHighlight","show_smiles");
    // });
  });
}

function highlightAtoms(element) {
  var jelement = jQuery(element);
  var jsme_box = jQuery(jelement.siblings('div.jsme-box'));
  var jsme = jsmeApplets[jsme_box.attr('id')];
  var atom_list = jelement.data("atom-list");
  var color = jelement.data("color");;
  var atom_color_list = [];
  atom_list.forEach(function(item,index) {
  	atom_color_list.push(item);
  	atom_color_list.push(color);
  });
  jsme.resetAtomColors(1);
  jsme.setAtomBackgroundColors(1, atom_color_list.join());
}

function clearHighlightAtoms(element) {
  var jelement = jQuery(element);
  var jsme_box = jQuery(jelement.siblings('div.jsme-box'));
  var jsme = jsmeApplets[jsme_box.attr('id')];
  jsme.resetAtomColors(1);
}

jQuery(document).ready(function(){
  var table = jQuery('#structure_query_result').DataTable({
    buttons: [ 
      'copy', 'csv', 'excel', 'pdf', 'print',
      {
      text: "Attributes for selected",
        action: function(){
          ids = jQuery( table.rows('.selected').nodes()).map(
                  function(){ return jQuery(this).data('compoundid');}
                ).get();
          if( ids.length > 0) {
            window.location.href = "<%= compounds_attributes_table_path %>?" + jQuery.param({ "ids":ids});
          } 
        }
      }
    ],
    order: [[ 0, 'asc' ]],
    asStripeClasses: []
  });
  jQuery('#structure_query_result tbody').on( 'click', 'tr', function () {
    jQuery(this).toggleClass('selected');
  });
  table.buttons().container().insertBefore( '#structure_query_result_filter' );
});
</script>
